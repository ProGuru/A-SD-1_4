#include <iostream>
// машинное слово

using namespace std;

class Set 
{
private: // Закрытая часть класса — данные
    static int N, cnt; // мощность универсума и счётчик множеств. (все объекты класса Set будут использовать единственную копию этих переменных)
    int n; // мощность множества
    char S; // тег для множества
    //unsigned short int W; // машинное слово
    int W; // машинное слово
public: // Открытая часть — функции для работы с множеством

    Set& operator&= (const Set&);
    Set& operator|= (const Set&);
    Set operator| (const Set&) const; // объединение. двуместные операции в качестве аргумента (второго, потому что первый — это сам объект) имеют константную ссылку на объект типа Set
    Set operator& (const Set&) const; // пересечение. Функции не меняют объект, для которого вызываются, для контроля за этим в каждом из объявлений после списка параметров помещён спецификатор const.
    //Set operator~ () const; // дополнение до универсума (не применяется в задаче)
    Set& operator= (const Set&); // оператор присваивания
    Set& operator= (Set&&);

    void Show(); // вывод множества на экран
    void Show_Other(); // вывод множества на экран
    int power() {return n;} // получение мощности. Применяется в конце программы, где подсчитывается ср. арифмет. мощность всех множеств

    Set(char); // конструктор множества
    Set(); // ещё конструктор — по умолчанию для результата вычисления Е
    Set(const Set &); // конструктор копии
    Set(Set &&);
    
    ~Set() {} // деструктор
};

int Set::N = 16; // Мощность универсума (вариант для шестнадцатиричной системя счисления)
int Set::cnt = 0; // Начальное значение счётчика множеств

void Set::Show_Other() // используется для вывода результата вычисления - Е, а также для подсчёта можности множества
{ 
    cout << '\n' << S << " = ["; // ПОЧЕМУ-ТО ТЕГ S НЕВЕРНО ВЫВОДИТ СВОЁ ЗНАЧЕНИЕ
    n = 0;
    
    for (int i = 0; i < N; i++)
    {
        if ((W >> i) & 1)
        {
            cout << (char)(i<=9?i+'0':i+'A'-10);
            n++;
        }
    }
    
    cout << "]";
}

void Set::Show() // используется для вывода результата вычисления - Е, а также для подсчёта можности множества
{ 
    cout << '\n' << "E" << " = ["; // ПОЧЕМУ-ТО ТЕГ S НЕВЕРНО ВЫВОДИТ СВОЁ ЗНАЧЕНИЕ
    n = 0;
    
    for (int i = 0; i < N; i++)
    {
        if ((W >> i) & 1)
        {
            cout << (char)(i<=9?i+'0':i+'A'-10);
            n++;
        }
    }
    
    cout << "]";
}

Set::Set(char): S('A' + cnt++), n(0), W(0) // генератор множества. S('A' + cnt++) - устанавливает тег в виде первой буквы латинского алфавита для первого объекта класса, для 2-го объекта класса S = B, для 3-го S = C
{
    //for (int i = 0; i < N; i++)
	W = rand()%65536;
    (this)->Show_Other();
}

Set::Set(): S('A' + cnt++), n(0), W(0) {} // конструктор по умолчанию, в котором все элементы множества = 0. Используется для выделения памяти под результат вычисления - Е

// описание методов для работы операторов
Set &Set::operator&= (const Set &B)
{ 
    Set C(*this);
    W = C.W & B.W;
    return *this; 
}

Set Set::operator& (const Set &B) const
{ 
    Set C(*this); // создаётся копия текущего объекта
    return (C &= B); 
}

Set &Set::operator|= (const Set &B)
{ 
    Set C(*this);
    W = C.W | B.W;
    return *this; 
    
}

Set Set::operator| (const Set &B) const
{
    Set C(*this);
    return (C |= B); 
}


Set::Set(const Set & B): S('A' + cnt++), n(B.n), W(0) // конструктор копирования. Можно было бы обойтись без него и предоставить это действие компилятору, если бы в классе не было указателя на дополнительную память. Копирование приведёт к тому, что указатели А в обоих объектах будут указывать на одну и ту же строку
{  
    W = B.W;
}

Set &Set::operator = (const Set& B) // перегрузка присваивания
{    
    if (this != &B)
    { 
        W = B.W;
        S = 'A' + cnt++; 
    }
    return *this; 
}


Set::Set(Set && B): S('A' + cnt++), n(B.n), W(B.W) {B.W = 0;} //Копирование с переносом. Используется, если источником данных является времнный объект


Set &Set::operator= (Set&& B) //Присваивание с переносом
{
    if (this != &B)
    {
    n = B.n; 
    W = B.W;  
    S = 'A' + cnt++; 
    //B.A = nullptr; 
    }
	return *this; 
}
